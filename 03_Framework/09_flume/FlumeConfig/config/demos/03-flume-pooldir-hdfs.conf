# 案例需求：使用Flume监听整个目录的文件，并上传至HDFS

a3.sources = r3
a3.sinks = k3
a3.channels = c3

# Describe/configure the source
a3.sources.r3.type = spooldir
# 监控的文件目录
a3.sources.r3.spoolDir = /opt/module/flume/upload
# 当目录中的一个文件内容读取完成后，两种处理策略：
# （1）立即删除 （2）修改文件名称，添加一个后缀
# 读完的文件，添加的文件后缀
a3.sources.r3.fileSuffix = .COMPLETED
# 读完的文件，删除策略
# never：永不删除 immediate：读完删除
a3.sources.r3.deletePolicy = never
a3.sources.r3.fileHeader = true
#忽略所有以.tmp结尾的文件，不上传
a3.sources.r3.ignorePattern = ([^ ]*\.tmp)



# Describe the sink
a3.sinks.k3.type = hdfs
# 文件上传的路径（支持转义字符）
a3.sinks.k3.hdfs.path = hdfs://hadoop102:8020/flume2/%Y%m%d/%H
#上传文件的前缀
a3.sinks.k3.hdfs.filePrefix = logs-

# 下面配置决定多长时间创建一个新目录
#是否按照时间滚动文件夹
a3.sinks.k3.hdfs.round = true
#多少时间单位创建一个新的文件夹
a3.sinks.k3.hdfs.roundValue = 1
#重新定义时间单位
a3.sinks.k3.hdfs.roundUnit = hour

#是否使用本地时间戳
# 如果使用时间转义序列，必须满足以下其中一个要求
# （1）使用本地时间戳 （2）在event中的headers中，必须有时间戳
a3.sinks.k3.hdfs.useLocalTimeStamp = true

#积攒多少个Event才flush到HDFS一次
a3.sinks.k3.hdfs.batchSize = 100
#设置文件类型，可支持压缩
a3.sinks.k3.hdfs.fileType = DataStream

# 文件生成条件：
# （1）时间条件：满足时间条件，不管这个文件写满了没有，直接生成新的文件
# （2）文件滚动条件：满足文件滚动条件，认为文件已经写满了，创建新的文件
#多久生成一个新的文件（单位：秒）
a3.sinks.k3.hdfs.rollInterval = 60
#设置每个文件的滚动大小（单位：bytes）
a3.sinks.k3.hdfs.rollSize = 134217700
#文件的滚动与Event数量的关系（写0表示停用）
a3.sinks.k3.hdfs.rollCount = 0



# Use a channel which buffers events in memory
a3.channels.c3.type = memory
a3.channels.c3.capacity = 1000
a3.channels.c3.transactionCapacity = 100



# Bind the source and sink to the channel
a3.sources.r3.channels = c3
a3.sinks.k3.channel = c3
