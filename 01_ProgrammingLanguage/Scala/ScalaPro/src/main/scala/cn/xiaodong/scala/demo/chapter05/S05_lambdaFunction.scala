package cn.xiaodong.scala.demo.chapter05

/**
 * 匿名函数（单个参数的案例）
 */
object S05_lambdaFunction {

  def main(args: Array[String]): Unit = {
    //（9）如果不关心名称，只关心逻辑处理，那么函数名（def）可以省略(参见匿名函数部分)

    /**
     * 定义一个函数
     *
     * @param fun 函数入参是一个函数fun，fun的入参是一个String字符串，返回值是Unit<br/>
     *            使用函数作为入参，可以扩展f9的功能
     *
     */
    def f9(fun: (String) => Unit): Unit = {
      // f9()调用了fun函数
      fun("xiaodong")
    }

    //    // 调用f9函数方法1：单独定义一个函数，做为f9的入参
    //    def fun(name: String): Unit = {
    //      println(name)
    //    }
    //
    //    f9(fun)

    // 调用f9函数方法2：使用匿名函数，作为f9的入参
    // 匿名函数：没有名字的函数，通过lambda表达式实现  (参数列表)=>{函数体}
    f9((name: String) => {
      println(name)
    })


    // --------------- 匿名函数的至简原则  ------------------------------

    println("-------------------  测试1  --------------------")
    //（1）参数的类型可以省略，会根据形参进行自动的推导
    f9((name) => {
      println(name)
    })

    println("-------------------  测试2  --------------------")
    //（2）类型省略之后，发现只有一个参数，则圆括号可以省略；其他情况：没有参数和参数超过1的永远不能省略圆括号。
    f9(name => {
      println(name)
    })

    println("-------------------  测试3  --------------------")
    //（3）匿名函数如果只有一行，则大括号也可以省略
    f9(name =>
      println(name)
    )

    println("-------------------  测试4  --------------------")
    //（4）如果参数只出现一次，则参数省略且后面参数可以用_代替
    f9(
      println(_)
    )

    println("-------------------  测试5  --------------------")
    //（5）如果可以推倒出println是一个函数体，而不是调用的语句，那么(_)可以省略
    f9(
      println
    )

  }


}
